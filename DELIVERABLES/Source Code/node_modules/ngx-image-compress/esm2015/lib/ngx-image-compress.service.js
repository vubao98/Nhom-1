/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, RendererFactory2 } from '@angular/core';
import { DOC_ORIENTATION, ImageCompress } from './image-compress';
export class NgxImageCompressService {
    /**
     * @param {?} rendererFactory
     */
    constructor(rendererFactory) {
        this.DOC_ORIENTATION = DOC_ORIENTATION;
        this.render = rendererFactory.createRenderer(null, null);
    }
    /**
     * @param {?} image
     * @return {?}
     */
    byteCount(image) {
        return ImageCompress.byteCount(image);
    }
    /**
     * @return {?}
     */
    uploadFile() {
        return ImageCompress.uploadFile(this.render);
    }
    /**
     * @param {?} image
     * @param {?} orientation
     * @param {?=} ratio
     * @param {?=} quality
     * @return {?}
     */
    compressFile(image, orientation, ratio = 50, quality = 50) {
        return ImageCompress.compress(image, orientation, this.render, ratio, quality);
    }
}
NgxImageCompressService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxImageCompressService.ctorParameters = () => [
    { type: RendererFactory2 }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxImageCompressService.prototype.render;
    /** @type {?} */
    NgxImageCompressService.prototype.DOC_ORIENTATION;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlLWNvbXByZXNzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW1hZ2UtY29tcHJlc3MvIiwic291cmNlcyI6WyJsaWIvbmd4LWltYWdlLWNvbXByZXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQWEsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFDLGVBQWUsRUFBRSxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUdoRSxNQUFNLE9BQU8sdUJBQXVCOzs7O0lBTWxDLFlBQVksZUFBaUM7UUFGdEMsb0JBQWUsR0FBRyxlQUFlLENBQUM7UUFHdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7OztJQUVNLFNBQVMsQ0FBQyxLQUFLO1FBQ3BCLE9BQU8sYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRU0sVUFBVTtRQUNmLE9BQU8sYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7Ozs7Ozs7SUFFTSxZQUFZLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxRQUFnQixFQUFFLEVBQUUsVUFBa0IsRUFBRTtRQUM5RSxPQUFPLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRixDQUFDOzs7WUFyQkYsVUFBVTs7OztZQUhvQixnQkFBZ0I7Ozs7Ozs7SUFNN0MseUNBQTBCOztJQUUxQixrREFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIFJlbmRlcmVyMiwgUmVuZGVyZXJGYWN0b3J5Mn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RPQ19PUklFTlRBVElPTiwgSW1hZ2VDb21wcmVzc30gZnJvbSAnLi9pbWFnZS1jb21wcmVzcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hJbWFnZUNvbXByZXNzU2VydmljZSB7XG5cbiAgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMjtcblxuICBwdWJsaWMgRE9DX09SSUVOVEFUSU9OID0gRE9DX09SSUVOVEFUSU9OO1xuXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5Mikge1xuICAgIHRoaXMucmVuZGVyID0gcmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xuICB9XG5cbiAgcHVibGljIGJ5dGVDb3VudChpbWFnZSkge1xuICAgIHJldHVybiBJbWFnZUNvbXByZXNzLmJ5dGVDb3VudChpbWFnZSk7XG4gIH1cblxuICBwdWJsaWMgdXBsb2FkRmlsZSgpOlByb21pc2U8e2ltYWdlOiBzdHJpbmcsIG9yaWVudGF0aW9uOiBET0NfT1JJRU5UQVRJT059PiB7XG4gICAgcmV0dXJuIEltYWdlQ29tcHJlc3MudXBsb2FkRmlsZSh0aGlzLnJlbmRlcik7XG4gIH1cblxuICBwdWJsaWMgY29tcHJlc3NGaWxlKGltYWdlLCBvcmllbnRhdGlvbiwgcmF0aW86IG51bWJlciA9IDUwLCBxdWFsaXR5OiBudW1iZXIgPSA1MCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIEltYWdlQ29tcHJlc3MuY29tcHJlc3MoaW1hZ2UsIG9yaWVudGF0aW9uLCB0aGlzLnJlbmRlciwgcmF0aW8sIHF1YWxpdHkpO1xuICB9XG5cbn1cbiJdfQ==